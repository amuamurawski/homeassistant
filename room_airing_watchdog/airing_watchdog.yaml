blueprint:
  name: Strażnik wietrzenia pokoju
  description: Powiadamia o zbyt długim wietrzeniu przy dużej różnicy temperatur.
  domain: automation
  source_url: https://raw.githubusercontent.com/amuamurawski/homeassistant/main/room_airing_watchdog/airing_watchdog.yaml

  input:
    window_contact:
      name: Czujnik okna/drzwi
      description: Wybierz binarny czujnik otwarcia.
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - door
            - window
            - opening

    room_temperature:
      name: Temperatura w pokoju
      description: Czujnik temperatury wewnątrz.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    outdoor_temperature:
      name: Temperatura na zewnątrz
      description: Czujnik temperatury na zewnątrz.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    notify_target:
      name: Kanały powiadomień
      description: "Podaj jeden lub więcej serwisów notify (oddziel przecinkiem lub nową linią). Przykład: notify.mobile_app_twój_telefon."
      selector:
        text:

    open_follow_up_action:
      name: Dodatkowa reakcja przy alarmie (opcjonalnie)
      description: Akcje wykonywane razem z powiadomieniem o zbyt długim wietrzeniu (np. komunikat TTS, pauza ogrzewania).
      default: []
      selector:
        action: {}

    close_follow_up_action:
      name: Dodatkowa reakcja przy zamknięciu (opcjonalnie)
      description: Akcje wykonywane po wykryciu zamknięcia okna (np. wznowienie ogrzewania, powiadomienie głosowe).
      default: []
      selector:
        action: {}

    temp_diff_threshold:
      name: Próg różnicy temperatur [°C]
      description: "Minimalna różnica T między wnętrzem a zewnątrz, od której blueprint zacznie odliczać czas wietrzenia."
      default: 6
      selector:
        number:
          min: 1
          max: 30
          step: 0.5
          unit_of_measurement: "°C"

    base_allowed_minutes:
      name: Bazowy dopuszczalny czas [min]
      description: "Startowy limit minut przy przekroczeniu progu temperatury — przed zastosowaniem skracania za dodatkowe °C."
      default: 15
      selector:
        number:
          min: 3
          max: 60
          step: 1
          unit_of_measurement: "min"

    per_degree_penalty:
      name: Skracanie czasu na każdy °C powyżej progu [min/°C]
      description: "O ile minut blueprint skróci limit wietrzenia za każdy dodatkowy °C powyżej progu różnicy temperatur."
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: "min/°C"

    min_allowed_minutes:
      name: Minimalny dopuszczalny czas [min]
      description: "Dolna granica limitu — blueprint nigdy nie skróci czasu poniżej tej wartości."
      default: 5
      selector:
        number:
          min: 1
          max: 30
          step: 1
          unit_of_measurement: "min"

    repeat_reminder_minutes:
      name: Powtarzaj przypomnienie co [min]
      description: "Co ile minut wysyłać kolejne przypomnienia podczas otwartego okna; 0 wyłącza ponowne alerty."
      default: 10
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: "min"
    use_persistent_notification:
      name: Twórz powiadomienie w aplikacji HA
      description: "Wysyła dodatkowe powiadomienie w aplikacji Home Assistant przy alarmie oraz po zamknięciu okna."
      default: true
      selector:
        boolean:

mode: restart
max_exceeded: silent

variables:
  t_room_label: "Pokój"
  t_unknown_room: "nieznany"
  t_temp_diff_label: "Różnica T wew–zew"
  t_window_open_label: "Okno otwarte już"
  t_minutes_suffix: "min"
  t_notify_title_initial: "Wietrzenie trwa zbyt długo"
  t_notify_title_repeat: "Wietrzenie nadal trwa"
  t_window_closed_title: "Okno zamknięte"
  t_window_closed_message: "Wietrzenie zakończone. Okno zostało zamknięte."
  v_window: !input window_contact
  v_room_t: !input room_temperature
  v_out_t: !input outdoor_temperature
  v_notify_raw: !input notify_target
  v_notify: >-
    {% set raw = v_notify_raw if v_notify_raw is string else '' %}
    {% set cleaned = raw.replace('\r', '\n').replace(',', '\n') %}
    {% set parts = cleaned.split('\n') %}
    {{ parts | map('trim') | select('ne', '') | list }}
  v_open_follow: !input open_follow_up_action
  v_close_follow: !input close_follow_up_action
  v_thr: !input temp_diff_threshold
  v_base: !input base_allowed_minutes
  v_pen: !input per_degree_penalty
  v_min: !input min_allowed_minutes
  v_repeat: !input repeat_reminder_minutes
  v_persistent: !input use_persistent_notification

triggers:
  - id: opened
    trigger: state
    entity_id: !input window_contact
    to: "on"
    for:
      seconds: 60

  - id: closed
    trigger: state
    entity_id: !input window_contact
    to: "off"

actions:
  - choose:
      - conditions:
          - condition: trigger
            id: opened
        sequence:
          - variables:
              room_t: "{{ states(v_room_t) | float(0) }}"
              out_t: "{{ states(v_out_t) | float(0) }}"
              diff: "{{ (room_t - out_t) | abs }}"
              allowed_min_raw: "{{ v_base - max(0, diff - v_thr) * v_pen }}"
              allowed_min: "{{ [v_min, allowed_min_raw] | max | round(0) }}"
          - if:
              - condition: template
                value_template: "{{ diff >= v_thr }}"
            then:
              - variables:
                  latest_deadline_sec: "{{ allowed_min * 60 }}"

              - wait_for_trigger:
                  - platform: state
                    entity_id: !input window_contact
                    to: "off"
                timeout: "{{ latest_deadline_sec | int }}"
                continue_on_timeout: true

              - if:
                  - condition: state
                    entity_id: !input window_contact
                    state: "on"
                then:
                  - variables:
                      msg: >-
                        {{ t_room_label }}: {{ area_name(v_window) or t_unknown_room }}.
                        {{ t_temp_diff_label }}: {{ diff | round(1) }}°C.
                        {{ t_window_open_label }} {{ allowed_min | int }} {{ t_minutes_suffix }}.
                  - if:
                      - condition: template
                        value_template: "{{ v_notify | length > 0 }}"
                    then:
                      - repeat:
                          for_each: "{{ v_notify }}"
                          sequence:
                            - service: "{{ repeat.item }}"
                              data:
                                title: "{{ t_notify_title_initial }}"
                                message: "{{ msg }}"
                  - if:
                      - condition: template
                        value_template: "{{ v_open_follow | length > 0 }}"
                    then: !input open_follow_up_action
                  - repeat:
                      while:
                        - condition: state
                          entity_id: !input window_contact
                          state: "on"
                        - condition: template
                          value_template: "{{ v_repeat | int > 0 }}"
                      sequence:
                        - delay:
                            minutes: !input repeat_reminder_minutes
                        - if:
                            - condition: template
                              value_template: "{{ v_notify | length > 0 }}"
                          then:
                            - repeat:
                                for_each: "{{ v_notify }}"
                                sequence:
                                  - service: "{{ repeat.item }}"
                                    data:
                                      title: "{{ t_notify_title_repeat }}"
                                      message: "{{ msg }}"
              - if:
                  - condition: template
                    value_template: "{{ v_persistent }}"
                then:
                  - service: persistent_notification.create
                    data:
                      title: "{{ t_notify_title_initial }}"
                      message: "{{ msg }}"

      - conditions:
          - condition: trigger
            id: closed
        sequence:
          - if:
              - condition: template
                value_template: "{{ v_persistent }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "{{ t_window_closed_title }}"
                  message: "{{ t_window_closed_message }}"
          - if:
              - condition: template
                value_template: "{{ v_close_follow | length > 0 }}"
            then: !input close_follow_up_action
