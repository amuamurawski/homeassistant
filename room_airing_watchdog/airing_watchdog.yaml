blueprint:
  name: Strażnik wietrzenia pokoju / Room airing watchdog
  description: |
    PL: Aalertuje, gdy wietrzenie trwa zbyt długo przy dużej różnicy temperatur i opcjonalnie czeka, aż CO₂ spadnie do celu. Może wywołać wskazany skrypt lub automatyzację.
    EN: Alerts when airing takes too long with a large indoor-outdoor temperature difference and can wait for CO₂ to reach a target. Can trigger a selected script or automation.
  domain: automation
  source_url: https://github.com/amuamurawski/homeassistant/blob/main/room_airing_watchdog/airing_watchdog.yaml

  input:
    window_contact:
      name: "Czujnik okna/drzwi / Window or door sensor"
      description: "PL: Wybierz binarny czujnik otwarcia. EN: Select the binary open/close sensor."
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - door
            - window
            - opening

    room_temperature:
      name: "Temperatura w pokoju / Room temperature"
      description: "PL: Czujnik temperatury wewnątrz. EN: Indoor temperature sensor."
      selector:
        entity:
          domain: sensor
          device_class: temperature

    outdoor_temperature:
      name: "Temperatura na zewnątrz / Outdoor temperature"
      description: "PL: Czujnik temperatury na zewnątrz. EN: Outdoor temperature sensor."
      selector:
        entity:
          domain: sensor
          device_class: temperature

    co2_sensor:
      name: "Czujnik CO₂ (opcjonalny) / CO₂ sensor (optional)"
      description: "PL: Pozwala czekać na spadek CO₂. EN: Lets the automation wait for CO₂ to drop."
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: carbon_dioxide

    notify_target:
      name: "Kanał powiadomień / Notification target"
      description: "PL: np. notify.mobile_app_twój_telefon. EN: e.g. notify.mobile_app_your_phone."
      selector:
        text:

    follow_up_entity:
      name: "Dodatkowa reakcja / Follow-up action"
      description: "PL: Opcjonalnie wybierz automatyzację lub skrypt do uruchomienia po alarmie. EN: Optionally select an automation or script to run after the alert."
      default: ""
      selector:
        entity:
          domain:
            - automation
            - script

    temp_diff_threshold:
      name: "Próg różnicy temperatur [°C] / Temperature difference threshold [°C]"
      default: 6
      selector:
        number:
          min: 1
          max: 30
          step: 0.5
          unit_of_measurement: "°C"

    base_allowed_minutes:
      name: "Bazowy dopuszczalny czas [min] / Base allowed time [min]"
      default: 15
      selector:
        number:
          min: 3
          max: 60
          step: 1
          unit_of_measurement: "min"

    per_degree_penalty:
      name: "Skracanie czasu na każdy °C powyżej progu [min/°C] / Time reduction per °C above threshold [min/°C]"
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: "min/°C"

    min_allowed_minutes:
      name: "Minimalny dopuszczalny czas [min] / Minimum allowed time [min]"
      default: 5
      selector:
        number:
          min: 1
          max: 30
          step: 1
          unit_of_measurement: "min"

    co2_target:
      name: "Docelowe CO₂ [ppm] / Target CO₂ [ppm]"
      default: 900
      selector:
        number:
          min: 600
          max: 2000
          step: 50
          unit_of_measurement: "ppm"

    co2_grace_minutes:
      name: "Dodatkowy czas przy wysokim CO₂ [min] / Extra time with high CO₂ [min]"
      default: 10
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: "min"

    repeat_reminder_minutes:
      name: "Powtarzaj przypomnienie co [min] / Repeat reminder every [min]"
      description: "PL: 0 wyłącza ponowne alerty. EN: 0 disables repeat alerts."
      default: 10
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: "min"

mode: restart
max_exceeded: silent

variables:
  lang: "{{ 'pl' if (hass.config.language | default('en') | string | lower).startswith('pl') else 'en' }}"
  t_room_label: "{{ 'Pokój' if lang == 'pl' else 'Room' }}"
  t_unknown_room: "{{ 'nieznany' if lang == 'pl' else 'unknown' }}"
  t_temp_diff_label: "{{ 'Różnica T wew–zew' if lang == 'pl' else 'Indoor-outdoor temp diff' }}"
  t_window_open_label: "{{ 'Okno otwarte już' if lang == 'pl' else 'Window open for' }}"
  t_minutes_suffix: "{{ 'min' if lang == 'pl' else 'min' }}"
  t_co2_high_label: "{{ 'CO₂ nadal wysokie' if lang == 'pl' else 'CO₂ still high' }}"
  t_notify_title_initial: "{{ 'Wietrzenie trwa zbyt długo' if lang == 'pl' else 'Airing taking too long' }}"
  t_notify_title_repeat: "{{ 'Wietrzenie nadal trwa' if lang == 'pl' else 'Airing still in progress' }}"
  t_window_closed_title: "{{ 'Okno zamknięte' if lang == 'pl' else 'Window closed' }}"
  t_window_closed_message: "{{ 'Wietrzenie zakończone. Okno zostało zamknięte.' if lang == 'pl' else 'Airing finished. The window has been closed.' }}"
  v_window: !input window_contact
  v_room_t: !input room_temperature
  v_out_t: !input outdoor_temperature
  v_co2: !input co2_sensor
  v_notify: !input notify_target
  v_follow: !input follow_up_entity
  v_thr: !input temp_diff_threshold
  v_base: !input base_allowed_minutes
  v_pen: !input per_degree_penalty
  v_min: !input min_allowed_minutes
  v_co2_target: !input co2_target
  v_co2_grace: !input co2_grace_minutes
  v_repeat: !input repeat_reminder_minutes

triggers:
  - id: opened
    trigger: state
    entity_id: !input window_contact
    to: "on"
    for:
      seconds: 60

  - id: closed
    trigger: state
    entity_id: !input window_contact
    to: "off"

actions:
  - choose:
      - conditions:
          - condition: trigger
            id: opened
        sequence:
          - variables:
              room_t: "{{ states(v_room_t) | float(0) }}"
              out_t: "{{ states(v_out_t) | float(0) }}"
              diff: "{{ (room_t - out_t) | abs }}"
              allowed_min_raw: "{{ v_base - max(0, diff - v_thr) * v_pen }}"
              allowed_min: "{{ [v_min, allowed_min_raw] | max | round(0) }}"
          - if:
              - condition: template
                value_template: "{{ diff >= v_thr }}"
            then:
              - variables:
                  latest_deadline_sec: "{{ (allowed_min + (v_co2_grace if v_co2|length>0 else 0)) * 60 }}"

              - wait_for_trigger:
                  - platform: state
                    entity_id: !input window_contact
                    to: "off"
                  - platform: template
                    value_template: "{{ v_co2|length>0 and (states(v_co2)|float(5000) <= v_co2_target) }}"
                timeout: "{{ latest_deadline_sec | int }}"
                continue_on_timeout: true

              - if:
                  - condition: state
                    entity_id: !input window_contact
                    state: "on"
                then:
                  - variables:
                      msg: >-
                        {{ t_room_label }}: {{ area_name(v_window) or t_unknown_room }}.
                        {{ t_temp_diff_label }}: {{ diff | round(1) }}°C.
                        {{ t_window_open_label }} {{ allowed_min | int }} {{ t_minutes_suffix }}.
                        {% if v_co2|length>0 and states(v_co2)|float(0) > v_co2_target %}
                        {{ t_co2_high_label }}: {{ states(v_co2)|int }} ppm.
                        {%- endif %}
                  - service: "{{ v_notify }}"
                    data:
                      title: "{{ t_notify_title_initial }}"
                      message: "{{ msg }}"
                  - if:
                      - condition: template
                        value_template: "{{ v_follow | length > 0 }}"
                    then:
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ v_follow.startswith('automation.') }}"
                            sequence:
                              - service: automation.trigger
                                target:
                                  entity_id: "{{ v_follow }}"
                          - conditions:
                              - condition: template
                                value_template: "{{ v_follow.startswith('script.') }}"
                            sequence:
                              - service: script.turn_on
                                target:
                                  entity_id: "{{ v_follow }}"
                  - repeat:
                      while:
                        - condition: state
                          entity_id: !input window_contact
                          state: "on"
                        - condition: template
                          value_template: "{{ v_repeat | int > 0 }}"
                      sequence:
                        - delay:
                            minutes: !input repeat_reminder_minutes
                        - service: "{{ v_notify }}"
                          data:
                            title: "{{ t_notify_title_repeat }}"
                            message: "{{ msg }}"

      - conditions:
          - condition: trigger
            id: closed
        sequence:
          - service: persistent_notification.create
            data:
              title: "{{ t_window_closed_title }}"
              message: "{{ t_window_closed_message }}"
